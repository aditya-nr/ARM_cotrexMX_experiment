
temp/firmware_disassembly.txt.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <reset_bit>:
code : #include <stdint.h>
code : #define alias_base 0x22000000U
code : #define bit_band_base 0x20000000U
code : void reset_bit(uint8_t *address, int bit)
code : {
   0:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   4:	e28db000 	add	fp, sp, #0
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e50b0008 	str	r0, [fp, #-8]
  10:	e50b100c 	str	r1, [fp, #-12]
code :     *address &= ~(1 << bit);
  14:	e51b3008 	ldr	r3, [fp, #-8]
  18:	e5d33000 	ldrb	r3, [r3]
  1c:	e1a03c03 	lsl	r3, r3, #24
  20:	e1a02c43 	asr	r2, r3, #24
  24:	e3a01001 	mov	r1, #1
  28:	e51b300c 	ldr	r3, [fp, #-12]
  2c:	e1a03311 	lsl	r3, r1, r3
  30:	e1a03c03 	lsl	r3, r3, #24
  34:	e1a03c43 	asr	r3, r3, #24
  38:	e1e03003 	mvn	r3, r3
  3c:	e1a03c03 	lsl	r3, r3, #24
  40:	e1a03c43 	asr	r3, r3, #24
  44:	e0033002 	and	r3, r3, r2
  48:	e1a03c03 	lsl	r3, r3, #24
  4c:	e1a03c43 	asr	r3, r3, #24
  50:	e20320ff 	and	r2, r3, #255	@ 0xff
  54:	e51b3008 	ldr	r3, [fp, #-8]
  58:	e5c32000 	strb	r2, [r3]
code : }
  5c:	e1a00000 	nop			@ (mov r0, r0)
  60:	e28bd000 	add	sp, fp, #0
  64:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
  68:	e12fff1e 	bx	lr

0000006c <reset_bit_bitAlias>:
code : void reset_bit_bitAlias(uint8_t *address, int bit)
code : {
  6c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
  70:	e28db000 	add	fp, sp, #0
  74:	e24dd014 	sub	sp, sp, #20
  78:	e50b0010 	str	r0, [fp, #-16]
  7c:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
code : 
code :     uint8_t *bitAlias = (uint8_t *)(alias_base + (32 * ((uint32_t)address - bit_band_base)) + bit * 4);
  80:	e51b3010 	ldr	r3, [fp, #-16]
  84:	e2833611 	add	r3, r3, #17825792	@ 0x1100000
  88:	e1a03283 	lsl	r3, r3, #5
  8c:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
  90:	e1a02102 	lsl	r2, r2, #2
  94:	e0833002 	add	r3, r3, r2
  98:	e50b3008 	str	r3, [fp, #-8]
code : 
code :     *bitAlias = 0;
  9c:	e51b3008 	ldr	r3, [fp, #-8]
  a0:	e3a02000 	mov	r2, #0
  a4:	e5c32000 	strb	r2, [r3]
code : }
  a8:	e1a00000 	nop			@ (mov r0, r0)
  ac:	e28bd000 	add	sp, fp, #0
  b0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
  b4:	e12fff1e 	bx	lr

000000b8 <main>:
code : int main()
code : {
  b8:	e92d4800 	push	{fp, lr}
  bc:	e28db004 	add	fp, sp, #4
  c0:	e24dd008 	sub	sp, sp, #8
code : 
code :     uint8_t *p1 = (uint8_t *)0x20000200,
  c4:	e59f303c 	ldr	r3, [pc, #60]	@ 108 <main+0x50>
  c8:	e50b3008 	str	r3, [fp, #-8]
code :             *p2 = (uint8_t *)0x20000210;
  cc:	e59f3038 	ldr	r3, [pc, #56]	@ 10c <main+0x54>
  d0:	e50b300c 	str	r3, [fp, #-12]
code :     *p1 = 0x6;
  d4:	e51b3008 	ldr	r3, [fp, #-8]
  d8:	e3a02006 	mov	r2, #6
  dc:	e5c32000 	strb	r2, [r3]
code :     *p2 = 0x6;
  e0:	e51b300c 	ldr	r3, [fp, #-12]
  e4:	e3a02006 	mov	r2, #6
  e8:	e5c32000 	strb	r2, [r3]
code : 
code :     reset_bit(p1, 2);          // *p1 now 2
  ec:	e3a01002 	mov	r1, #2
  f0:	e51b0008 	ldr	r0, [fp, #-8]
  f4:	ebfffffe 	bl	0 <reset_bit>
code :     reset_bit_bitAlias(p2, 2); // *p2 now 2
  f8:	e3a01002 	mov	r1, #2
  fc:	e51b000c 	ldr	r0, [fp, #-12]
 100:	ebfffffe 	bl	6c <reset_bit_bitAlias>
code : 
code :     for (;;)
 104:	eafffffe 	b	104 <main+0x4c>
 108:	20000200 	.word	0x20000200
 10c:	20000210 	.word	0x20000210
